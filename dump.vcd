$date
	Sat Jun 28 07:27:56 2025
$end

$version
	Synopsys VCS version U-2023.03-SP2_Full64
$end

$timescale
	1ns
$end

$comment Csum: 1 aee09477b20cc80a $end


$scope module uvm_pkg $end
$var time 64 ! setting_offset $end
$var reg 32 " uvm_global_random_seed [31:0] $end
$var reg 32 # UVM_UNBOUNDED_CONNECTIONS [31:0] $end
$var reg 1 $ uvm_start_uvm_declarations $end
$var reg 32 % setting_verbosity [31:0] $end
$var reg 1 & is_verdi_set_verbosity_called $end
$upscope $end


$scope module $unit $end
$upscope $end


$scope module tb_top_apb_slave $end
$var reg 1 ' pclk $end
$var reg 1 ( preset_n $end

$scope begin unnamed$$_vcs_5 $end
$upscope $end


$scope begin unnamed$$_vcs_0 $end
$upscope $end


$scope begin unnamed$$_vcs_1 $end
$upscope $end


$scope begin unnamed$$_vcs_2 $end
$upscope $end


$scope begin unnamed$$_vcs_3 $end
$upscope $end


$scope begin unnamed$$_vcs_4 $end
$upscope $end


$scope module m_vintf $end
$var reg 1 ) pclk $end
$var reg 1 * preset_n $end
$var reg 32 + paddr [31:0] $end
$var reg 1 , pselx $end
$var reg 1 - penable $end
$var reg 1 . pwrite $end
$var reg 32 / pwdata [31:0] $end
$var reg 1 0 pready $end
$var reg 32 1 prdata [31:0] $end
$var reg 1 2 pslverr $end
$upscope $end


$scope module apb_mem_inst1 $end
$var wire 1 3 _PCLK $end
$var wire 1 4 _PRESETn $end
$var wire 1 5 _PSEL1 $end
$var wire 1 6 _PWRITE $end
$var wire 1 7 _PENABLE $end
$var wire 32 8 _PADDR [31:0] $end
$var wire 32 9 _PWDATA [31:0] $end
$var reg 32 : _PRDATA [31:0] $end
$var reg 1 ; _PREADY $end
$var reg 1 < _PSLVERR $end
$var reg 2 = _state [1:0] $end
$var reg 2 > _next_state [1:0] $end
$var reg 2 ? delay [1:0] $end
$var reg 1 @ read_only $end
$var reg 1 A write_only $end

$scope begin unnamed$$_0 $end
$upscope $end


$scope begin D1 $end

$scope begin D2 $end

$scope begin A2 $end
$upscope $end


$scope begin A3 $end
$upscope $end


$scope begin A4 $end
$upscope $end


$scope begin A5 $end
$upscope $end

$upscope $end

$upscope $end


$scope begin unnamed$$_vcs_0 $end

$scope begin B1 $end

$scope begin A1 $end

$scope begin A6 $end
$upscope $end

$upscope $end

$upscope $end


$scope begin C0 $end

$scope begin C1 $end
$upscope $end

$upscope $end

$upscope $end


$scope module apb_assrt_mdu $end
$var wire 1 3 pclk $end
$var wire 1 5 pselx $end
$var wire 1 7 penable $end
$var wire 1 ; pready $end
$var wire 32 8 paddr [31:0] $end
$var wire 1 6 pwrite $end
$var wire 32 9 pwdata [31:0] $end
$var wire 32 : prdata [31:0] $end
$var wire 1 < pslverr $end
$var wire 1 4 preset_n $end

$scope task _$$txp_fail_action_assrt_apb_states_transition_prpty $end
$upscope $end


$scope task _$$txp_pass_action_assrt_apb_pselx_fwd_nxt_cycle_penable_prpty $end
$upscope $end


$scope task _$$txp_fail_action_assrt_apb_pselx_fwd_nxt_cycle_penable_prpty $end
$upscope $end


$scope task _$$txp_fail_action_assrt_apb_signals_changing_x_z_prpty $end
$upscope $end


$scope task _$$txp______assert_assrt_apb_idle_to_access_state_transition $end
$upscope $end


$scope task _$$txp______assert_cover_apb_pselx_fwd_nxt_cycle_penable_prpty $end
$upscope $end


$scope task _$$txp______assert_assrt_apb_signals_changing_x_z_prpty $end
$upscope $end


$scope task _$$txp______assert_cover_apb_signals_changing_x_z_prpty $end
$upscope $end


$scope task _$$txp_pass_action_assrt_apb_states_transition_prpty $end
$upscope $end


$scope task _$$txp_fail_action_assrt_apb_idle_to_access_state_transition $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
0&
1$
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx !
b11111111111111111111111111111111 #
b00000000000000000000000000000000 %
b01000010000001111100110001000111 "
0'
0(
b00000000000000000000000000000000 1
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx +
0;
0<
x@
xA
b00000000000000000000000000000000 :
b00 >
b00 =
b11 ?
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 8
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 9
03
x7
04
x5
x6
0)
0*
x-
00
x,
02
x.
$end
#5
1'
1)
13
#10
0'
0)
03
#15
1'
1)
13
#20
0'
0)
03
#22
1(
1*
14
#25
1'
1)
13
0,
05
0-
07
b00 ?
#30
0'
0)
03
#35
1'
1)
13
1,
15
b00000000000000000000000000001010 +
b00000000000000000000000000001010 8
b11111101111001000000110001001110 /
b11111101111001000000110001001110 9
1.
16
b01 >
#40
0'
0)
03
#45
1'
1)
13
1-
17
b01 =
1;
10
b10 >
#50
0'
0)
03
#55
1'
1)
13
0,
05
0-
07
b10 =
0;
00
b00 >
#60
0'
0)
03
#65
1'
1)
13
1,
15
0.
06
b00 =
b01 ?
b01 >
#70
0'
0)
03
#75
1'
1)
13
1-
17
b01 =
#80
0'
0)
03
#85
1'
1)
13
1;
10
b11111101111001000000110001001110 :
b11111101111001000000110001001110 1
b10 >
#90
0'
0)
03
#95
1'
1)
13
b10 =
0;
00
b01 >
#100
0'
0)
03
#105
1'
1)
13
b01 =
#110
0'
0)
03
#115
1'
1)
13
1;
10
b10 >
#120
0'
0)
03
#125
1'
1)
13
b10 =
0;
00
b01 >
